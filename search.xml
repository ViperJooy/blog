<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chrome104版本支持开启硬解hevc</title>
    <url>/2022/08/11/Chrome104%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81%E5%BC%80%E5%90%AF%E7%A1%AC%E8%A7%A3hevc/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="Chrome启动参数开启硬解hevc"><a href="#Chrome启动参数开启硬解hevc" class="headerlink" title="Chrome启动参数开启硬解hevc"></a>Chrome启动参数开启硬解hevc</h3><p>mac开启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open /Applications/Google\ Chrome.app/ --args --enable-features=PlatformHEVCDecoderSupport</span><br></pre></td></tr></table></figure>
          </div>]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8 安装 mysql 5.7</title>
    <url>/2021/03/15/CentOS8-%E5%AE%89%E8%A3%85-mysql-5-7/</url>
    <content><![CDATA[<div class="note success">
            <h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install ncurses-compat-libs</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<div class="note success">
            <h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><h5 id="可以自行选择下载的版本-https-repo-mysql-com-yum"><a href="#可以自行选择下载的版本-https-repo-mysql-com-yum" class="headerlink" title="可以自行选择下载的版本  https://repo.mysql.com/yum/"></a>可以自行选择下载的版本  <a href="https://repo.mysql.com/yum/">https://repo.mysql.com/yum/</a></h5>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-libs-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">wget https://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-common-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">wget https://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-client-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">wget https://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-server-5.7.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>


<div class="note success">
            <h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh mysql-community-libs-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh mysql-community-common-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh mysql-community-client-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh mysql-community-server-5.7.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="查找默认密码"><a href="#查找默认密码" class="headerlink" title="查找默认密码"></a>查找默认密码</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="使用默认密码登录"><a href="#使用默认密码登录" class="headerlink" title="使用默认密码登录"></a>使用默认密码登录</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>


<div class="note success">
            <h5 id="更改默认密码"><a href="#更改默认密码" class="headerlink" title="更改默认密码"></a>更改默认密码</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set password for &#x27;root&#x27;@&#x27;%&#x27; = password(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="更改密码校验等级"><a href="#更改密码校验等级" class="headerlink" title="更改密码校验等级"></a>更改密码校验等级</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="创建新用户密码"><a href="#创建新用户密码" class="headerlink" title="创建新用户密码"></a>创建新用户密码</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user &#x27;chutianshu&#x27;@&#x27;%&#x27; identified by &#x27;XXXXXXXX&#x27;;</span><br></pre></td></tr></table></figure>


<div class="note success">
            <h5 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;username&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>
<div class="note success">
            <h5 id="使生效"><a href="#使生效" class="headerlink" title="使生效"></a>使生效</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="更改端口"><a href="#更改端口" class="headerlink" title="更改端口"></a>更改端口</h5>
          </div>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<div class="note success">
            <h5 id="在文件中加入"><a href="#在文件中加入" class="headerlink" title="在文件中加入"></a>在文件中加入</h5>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">port=63306</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>rclone自动挂载</title>
    <url>/2022/06/26/Linux%E4%B8%8Brclone%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="rclone自动挂载"><a href="#rclone自动挂载" class="headerlink" title="rclone自动挂载"></a>rclone自动挂载</h3>
          </div>


<h4 id="获取脚本"><a href="#获取脚本" class="headerlink" title="获取脚本"></a>获取脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget git.io/rcloned -O rcloned</span><br></pre></td></tr></table></figure>

<h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME=&quot;onedrive&quot; #Rclone配置时填写的name</span><br><span class="line">REMOTE=&#x27;&#x27;  #远程文件夹，网盘里的挂载的一个文件夹，留空为整个网盘</span><br><span class="line">LOCAL=&#x27;/mnt/onedrive&#x27;  #挂载地址，VPS本地挂载目录</span><br></pre></td></tr></table></figure>

<h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv rcloned /etc/init.d/rcloned</span><br><span class="line">chmod +x /etc/init.d/rcloned</span><br><span class="line">update-rc.d -f rcloned defaults # Debian/Ubuntu</span><br><span class="line">chkconfig rcloned on # Centos</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rclone</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux挂载SMB网络存储</title>
    <url>/2021/08/04/Linux%E6%8C%82%E8%BD%BDsmb%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="Linux挂载SMB网络存储"><a href="#Linux挂载SMB网络存储" class="headerlink" title="Linux挂载SMB网络存储"></a>Linux挂载SMB网络存储</h3>
          </div>


<h4 id="安装cifs"><a href="#安装cifs" class="headerlink" title="安装cifs"></a>安装cifs</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install cifs-utils --Ubuntu</span><br><span class="line">yum install cifs-utils --Centos</span><br></pre></td></tr></table></figure>

<h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount -t cifs //192.168.2.20/N1-2t /mnt/sda1 -o username=username,password=password,vers=1.0,iocharset=utf8</span><br></pre></td></tr></table></figure>

<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt/sda1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SMB</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>File Browser 安装及使用</title>
    <url>/2021/09/07/File%20Browser%20%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="File-Browser-安装及使用"><a href="#File-Browser-安装及使用" class="headerlink" title="File Browser 安装及使用"></a>File Browser 安装及使用</h3>
          </div>



<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h2 id="File-Browser-是一个基于-Web-的文件管理器。它可以使你随时随地的对某一目录下设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。同时它还支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限等十分丰富的特性。"><a href="#File-Browser-是一个基于-Web-的文件管理器。它可以使你随时随地的对某一目录下设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。同时它还支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限等十分丰富的特性。" class="headerlink" title="File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对某一目录下设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。同时它还支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限等十分丰富的特性。"></a>File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对某一目录下设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。同时它还支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限等十分丰富的特性。</h2><span id="more"></span>

<h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><p>File Browser 适用于全平台，任何操作系统都可以安装它，当然，我会以 Linux 为主。<br>File Browser 在 Linux 的安装非常简单，只需要一条命令就可以搞定：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash</span><br></pre></td></tr></table></figure>
<p>当安装好之后，你并不能立即使用它，需要修改一些配置。</p>
<ul>
<li><p>创建配置数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config init</span><br></pre></td></tr></table></figure></li>
<li><p>设置监听地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --address 0.0.0.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置监听端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --port 8088</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置语言环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --locale zh-cn</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置日志位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --log /var/log/filebrowser.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db users add root password --perm.admin</span><br></pre></td></tr></table></figure>
<p>其中的root和password分别是用户名和密码，根据自己的需求更改。<br>有关更多配置的选项，可以参考官方文档：<a href="https://filebrowser.org/">https://filebrowser.org/</a>  </p>
<h4 id><a href="#" class="headerlink" title></a></h4></li>
<li><p>配置修改好以后，就可以启动 File Browser 了，使用-d参数指定配置数据库路径。示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db</span><br></pre></td></tr></table></figure>
<p>启动成功就可以使用浏览器访问 File Browser 了，在浏览器输入 IP:端口，示例：<a href="http://192.168.1.1:8088/">http://192.168.1.1:8088</a><br>然后会看到 File Browser 的登陆界面，用刚刚创建的用户登陆。<br>登陆以后，默认会看到 File Browser 运行目录下的文件，需要更改一下当前用户的文件夹位置。<br>点击 [设置] → [用户设置] → 编辑用户 admin → 将目录范围改为你想要显示的文件夹，例如：/mnt → 修改完成后点击最下方的保存即可。<br>这样，File Browser 的基本安装和配置就搞定了。</p>
</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><p>File Browser 默认是前台运行，想使其后台运行，有如下一些方法：</p>
<ul>
<li><p>nohup 大法：<br>运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup filebrowser -d /etc/filebrowser.db &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>停止运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 $(pidof filebrowser)</span><br></pre></td></tr></table></figure>
<p>开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/exit 0/i nohup filebrowser -d /etc/filebrowser.db &gt;/dev/null 2&gt;&amp;1 &amp;&#x27; /etc/rc.local</span><br></pre></td></tr></table></figure>
<p>取消开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/nohup filebrowser -d /etc/filebrowser.db &gt;/dev/null 2&gt;&amp;1 &amp;/d&#x27; /etc/rc.local</span><br></pre></td></tr></table></figure></li>
<li><p>systemd 大法：<br>首先下载 File Browser 的 service 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/zhfe981206/filebrowser/master/filebrowser.service -O /lib/systemd/system/filebrowser.service</span><br></pre></td></tr></table></figure>
<p>如果你的运行命令不是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/filebrowser -d /etc/filebrowser.db</span><br></pre></td></tr></table></figure>
<p>则需要对 service 文件进行修改，将文件的 ExecStart 改为你的运行命令，更改完成后需要输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start filebrowser.service</span><br></pre></td></tr></table></figure>
<p>停止运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop filebrowser.service</span><br></pre></td></tr></table></figure>
<p>开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable filebrowser.service</span><br></pre></td></tr></table></figure>
<p>取消开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable filebrowser.service</span><br></pre></td></tr></table></figure>
<p>查看运行状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status filebrowser.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>screen 大法<br>使用screen，如果没有请使用包管理器安装。<br>使用screen命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S filebrowser</span><br></pre></td></tr></table></figure>
<p>创建一个screen会话，在该会话里运行filebrowser，启动后使用Ctrl+a,d离开会话。<br>我推荐使用 systemd 的方法来后台运行，当然，前提是你所使用的操作系统支持 systemd，其次推荐使用screen的方法，简单粗暴。</p>
</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>File Browser 2.0 起开始内建 HTTPS 支持，只需要配置 SSL 证书即可。</p>
<ul>
<li><p>配置SSL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --cert example.com.crt --key example.com.key</span><br></pre></td></tr></table></figure>
<p>其中example.com.crt和example.com.key分别是 SSL 证书和密钥路径，根据自身情况进行更改。配置完 SSL 后，只可以使用 HTTPS 访问，不可以使用 HTTP。</p>
</li>
<li><p>取消 SSL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --cert &quot;&quot; --key &quot;&quot;</span><br></pre></td></tr></table></figure>
<p>在这里，我比较建议直接使用Caddy，Caddy一个开源、支持 HTTP/2 的 Web 服务器，它的一个显著特点就是默认启用 HTTPS 访问，会自己申请 SSL 证书，同时支持大量的插件，File Browser 就可以作为其插件运行。同时，通过下载相应的插件以及配置环境变量可以自动实现ssl证书的申请。<br>比如我的域名套了一层cloudflare，我便可以下载对应的插件，实现自动申请ssl证书。</p>
</li>
</ul>
<h3 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h3><p>每个人的情况不同，外网访问的配置方法也不一样。</p>
<p>对于vps等，一般都会分配公网 IP 地址，不管是 v4 还是 v6，在防火墙上打开相应的端口以及设置好端口转发即可。对于一些服务器内使用了防火墙的（iptables，firewalld），不仅需要打开服务提供商的防火墙上对应的端口以及设置好端口转发，还需设置服务器上的防火墙。</p>
<p>如果你没有公网IP地址，那么你想要外网访问可能就需要内网穿透了。</p>
<p>原文地址：<a href="https://blog.ukiyo.top/post/35356/">File Browser 安装及使用</a> 感谢🙏s作者</p>
]]></content>
      <categories>
        <category>filebrowser</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>N1 使用docker搭建plex</title>
    <url>/2021/05/20/N1-%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAplex/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="N1-使用docker搭建plex"><a href="#N1-使用docker搭建plex" class="headerlink" title="N1 使用docker搭建plex"></a>N1 使用docker搭建plex</h3>
          </div>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>这里推荐linuxserver的镜像，支持arm64架构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull linuxserver/plex:latest</span><br></pre></td></tr></table></figure>

<span id="more"></span>



<h3 id="获取Claim-Code"><a href="#获取Claim-Code" class="headerlink" title="获取Claim Code"></a>获取Claim Code</h3><p>浏览器访问 <a href="https://www.plex.tv/claim/">https://www.plex.tv/claim/</a> 获得Claim Code</p>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mkdir plex</span><br><span class="line">cd plex</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>



<h3 id="创建docker-compose-yml文件"><a href="#创建docker-compose-yml文件" class="headerlink" title="创建docker-compose.yml文件"></a>创建docker-compose.yml文件</h3><p>推荐使用docker-compose方式构建容器，方便下次重复使用</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;2.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  plex:</span><br><span class="line">    image: linuxserver/plex:latest</span><br><span class="line">    container_name: plex</span><br><span class="line">    network_mode: host</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=<span class="number">1000</span></span><br><span class="line">      - PGID=<span class="number">1000</span></span><br><span class="line">      - VERSION=docker</span><br><span class="line">      - PLEX_CLAIM= <span class="comment">#填入获取到的claim code</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/config</span><br><span class="line">      - /mnt:/data</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure>



<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>plex</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>N1</tag>
        <tag>plex</tag>
      </tags>
  </entry>
  <entry>
    <title>N1 使用docker搭建qbittorrent</title>
    <url>/2021/05/21/N1-%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAqbittorrent/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="N1-使用docker搭建qbittorrent"><a href="#N1-使用docker搭建qbittorrent" class="headerlink" title="N1 使用docker搭建qbittorrent"></a>N1 使用docker搭建qbittorrent</h3>
          </div>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>这里推荐linuxserver的镜像，支持arm64架构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull linuxserver/qbittorrent:latest</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mkdir qbittorrent</span><br><span class="line">cd qbittorrent</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<h3 id="创建docker-compose-yml文件"><a href="#创建docker-compose-yml文件" class="headerlink" title="创建docker-compose.yml文件"></a>创建docker-compose.yml文件</h3><p>推荐使用docker-compose方式构建容器，方便下次重复使用</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;2.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  qbittorrent:</span><br><span class="line">    image: linuxserver/qbittorrent:latest</span><br><span class="line">    container_name: qbittorrent</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=<span class="number">1000</span></span><br><span class="line">      - PGID=<span class="number">1000</span></span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - WEBUI_PORT=<span class="number">8080</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/config</span><br><span class="line">      - /mnt:/mnt</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">18080</span>:<span class="number">8080</span></span><br><span class="line">      - <span class="number">16881</span>:<span class="number">6881</span></span><br><span class="line">      - <span class="number">16881</span>:<span class="number">6881</span>/udp</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>qbittorrent</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>N1</tag>
        <tag>qbittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle Cloud 相关操作</title>
    <url>/2022/08/23/Oracle%20Cloud%20%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="Oracle-Cloud-关闭防火墙"><a href="#Oracle-Cloud-关闭防火墙" class="headerlink" title="Oracle Cloud 关闭防火墙"></a>Oracle Cloud 关闭防火墙</h3>
          </div>

<span id="more"></span>

<ul>
<li><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line">apt-get purge netfilter-persistent</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除多余附件</span><br><span class="line">systemctl stop oracle-cloud-agent</span><br><span class="line">systemctl disable oracle-cloud-agent</span><br><span class="line">systemctl stop oracle-cloud-agent-updater</span><br><span class="line">systemctl disable oracle-cloud-agent-updater</span><br><span class="line"></span><br><span class="line"># 关闭防火墙并禁止自启动</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note success">
            <h3 id="Oracle-Cloud-开启root登录"><a href="#Oracle-Cloud-开启root登录" class="headerlink" title="Oracle Cloud 开启root登录"></a>Oracle Cloud 开启root登录</h3>
          </div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo root:password |sudo chpasswd root</span><br><span class="line">sudo sed -i &#x27;s/^#\?PermitRootLogin.*/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config;</span><br><span class="line">sudo sed -i &#x27;s/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config;</span><br><span class="line">sudo service sshd restart</span><br><span class="line"></span><br><span class="line">重启sshd服务</span><br><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure>



<div class="note success">
            <h3 id="Oracle-Cloud-vps扩容"><a href="#Oracle-Cloud-vps扩容" class="headerlink" title="Oracle Cloud vps扩容"></a>Oracle Cloud vps扩容</h3>
          </div>


<p><code>点击Boot Volume</code><br><code>编辑卷大小</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd iflag=direct if=/dev/oracleoci/oraclevda of=/dev/null count=1</span><br><span class="line">echo &quot;1&quot; | sudo tee /sys/class/block/`readlink /dev/oracleoci/oraclevda | cut -d&#x27;/&#x27; -f 2`/device/rescan</span><br><span class="line"></span><br><span class="line">growpart /dev/sda1 </span><br><span class="line"></span><br><span class="line">resize2fs /dev/sda1</span><br><span class="line"></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Oracle Cloud</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu、Armbian等Debian系统安装PLEX服务</title>
    <url>/2021/08/04/Ubuntu%E3%80%81Armbian%E6%90%AD%E5%BB%BAplex%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="Ubuntu、Armbian等Debian系统安装PLEX服务"><a href="#Ubuntu、Armbian等Debian系统安装PLEX服务" class="headerlink" title="Ubuntu、Armbian等Debian系统安装PLEX服务"></a>Ubuntu、Armbian等Debian系统安装PLEX服务</h3>
          </div>

<div class="note success">
            <h3 id="使用-deb文件安装方式"><a href="#使用-deb文件安装方式" class="headerlink" title="使用 deb文件安装方式"></a>使用 deb文件安装方式</h3><ul><li><p>访问 <a href="https://www.plex.tv/media-server-downloads/#plex-media-server">plex downlod</a> 页面 </p></li><li><p>选择linux-&gt;<a href="https://downloads.plex.tv/plex-media-server-new/1.27.0.5897-3940636f2/debian/plexmediaserver_1.27.0.5897-3940636f2_amd64.deb">Ubuntu (16.04+) / Debian (8+) - Intel/AMD 64-bit</a> 下载 .deb文件</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i plexmediaserver.deb</span><br></pre></td></tr></table></figure>
          </div>

<span id="more"></span>

<div class="note success">
            <h3 id="使用Plex存储库"><a href="#使用Plex存储库" class="headerlink" title="使用Plex存储库"></a>使用Plex存储库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><p>将存储库添加到系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><p>更新apt缓存</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><!--more--><h4 id="-2"><a href="#-2" class="headerlink" title></a></h4><p>安装plex</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install plexmediaserver</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title></a></h4><p>查看plex服务状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status plexmediaserver.service</span><br></pre></td></tr></table></figure><h4 id="-4"><a href="#-4" class="headerlink" title></a></h4><p>卸载plex服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove plexmediaserver</span><br></pre></td></tr></table></figure><h4 id="-5"><a href="#-5" class="headerlink" title></a></h4><p>plex默认访问地址 <a href="http://127.0.0.1:32400/web">http://127.0.0.1:32400/web</a></p>
          </div>]]></content>
      <categories>
        <category>plex</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.6安装ffmpeg</title>
    <url>/2021/08/18/centos7%E5%AE%89%E8%A3%85ffmpeg/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="Centos7-6安装ffmpeg"><a href="#Centos7-6安装ffmpeg" class="headerlink" title="Centos7.6安装ffmpeg"></a>Centos7.6安装ffmpeg</h3>
          </div>

<span id="more"></span>

<h4 id="安装脚本命令"><a href="#安装脚本命令" class="headerlink" title="安装脚本命令"></a>安装脚本命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 ffmpeg(从git下载太慢了,建议其他地方下载然后在上传)(过程挺大)</span></span><br><span class="line">rm -rf /usr/local/ffmpeg</span><br><span class="line">mkdir /usr/local/ffmpeg</span><br><span class="line">cd /usr/local/ffmpeg</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git <span class="built_in">clone</span> https://git.ffmpeg.org/ffmpeg.git ffmpeg</span></span><br><span class="line">wget http://ffmpeg.org/releases/ffmpeg-4.3.1.tar.gz</span><br><span class="line">tar xvf ffmpeg-4.3.1.tar.gz</span><br><span class="line">cd ffmpeg-4.3.1</span><br><span class="line">./configure --enable-shared --prefix=/usr/local/ffmpeg --disable-yasm</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加动态库路径</span></span></span><br><span class="line">touch  /etc/ld.so.conf.d/fmpeg.conf</span><br><span class="line">echo &#x27;/usr/local/ffmpeg/lib&#x27; &gt;&gt; /etc/ld.so.conf.d/fmpeg.conf</span><br><span class="line">ldconfig -v</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 软连接</span></span></span><br><span class="line">rm -rf /usr/bin/ffmpeg</span><br><span class="line">ln -s /usr/local/ffmpeg/bin/ffmpeg /usr/bin/ffmpeg</span><br><span class="line">rm -rf /usr/bin/ffprobe</span><br><span class="line">ln -s /usr/local/ffmpeg/bin/ffprobe /usr/bin/ffprobe</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 头文件</span></span></span><br><span class="line">cd /usr/local/ffmpeg/include/</span><br><span class="line">mkdir ffmpeg</span><br><span class="line">cp -r libswscale/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line">cp -r libswresample/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> -r libpostproc/ /usr/local/ffmpeg/include/ffmpeg/</span></span><br><span class="line">cp -r libavutil/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line">cp -r libavformat/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line">cp -r libavfilter/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line">cp -r libavcodec/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line">cp -r libavdevice/ /usr/local/ffmpeg/include/ffmpeg/</span><br><span class="line">cp -r ffmpeg/ /usr/include/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ffmpeg 安装程序会在 /usr/local/ffmpeg/lib/pkgconfig 目录下提供 libavcodec.pc libswscale.pc 等5个.pc文件，分别对应安装的五个库文件。必须要让 pkg-config 能找到 ffmpeg 的 *.pc 文件，通过 PKG_CONFIG_PATH 来设置 pkg-config 来更新。</span></span></span><br><span class="line">echo &#x27;export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig:/usr/local/ffmpeg/lib/pkgconfig&#x27; &gt;&gt; /etc/profile</span><br><span class="line">echo &#x27;export FFMPEG_HOME=/usr/local/ffmpeg&#x27; &gt;&gt; /etc/profile</span><br><span class="line">echo &#x27;export PATH=$PATH:$FFMPEG_HOME&#x27; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>centos</category>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>N1 使用docker搭建Jellyfin</title>
    <url>/2021/05/19/N1-%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAjellyfin/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="N1-使用docker搭建Jellyfin"><a href="#N1-使用docker搭建Jellyfin" class="headerlink" title="N1 使用docker搭建Jellyfin"></a>N1 使用docker搭建Jellyfin</h3>
          </div>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>这里推荐linuxserver的镜像，支持arm64架构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull linuxserver/jellyfin:latest</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mkdir jellyfin</span><br><span class="line">cd jellyfin</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<h3 id="创建docker-compose-yml文件"><a href="#创建docker-compose-yml文件" class="headerlink" title="创建docker-compose.yml文件"></a>创建docker-compose.yml文件</h3><p>推荐使用docker-compose方式构建容器，方便下次重复使用</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;2.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  jellyfin:</span><br><span class="line">    image: linuxserver/jellyfin:latest</span><br><span class="line">    container_name: jellyfin</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=<span class="number">1000</span></span><br><span class="line">      - PGID=<span class="number">1000</span></span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - JELLYFIN_PublishedServerUrl=<span class="number">192.168</span>.<span class="number">0.5</span> <span class="comment">#optional</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/config</span><br><span class="line">      - /mnt:/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8096</span>:<span class="number">8096</span></span><br><span class="line">      - <span class="number">8920</span>:<span class="number">8920</span> <span class="comment">#optional</span></span><br><span class="line">      - <span class="number">7359</span>:<span class="number">7359</span>/udp <span class="comment">#optional</span></span><br><span class="line">      - <span class="number">1900</span>:<span class="number">1900</span>/udp <span class="comment">#optional</span></span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="解决字体方块问题"><a href="#解决字体方块问题" class="headerlink" title="解决字体方块问题"></a>解决字体方块问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it  jellyfin /bin/bash</span><br><span class="line">apt update</span><br><span class="line">apt install fonts-noto-cjk-extra</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jellyfin</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>N1</tag>
        <tag>jellyfin</tag>
      </tags>
  </entry>
  <entry>
    <title>docker搭建chevereto图床</title>
    <url>/2021/03/26/docker%E6%90%AD%E5%BB%BAchevereto%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<div class="note success">
            <h5 id="docker搭建chevereto图床"><a href="#docker搭建chevereto图床" class="headerlink" title="docker搭建chevereto图床"></a>docker搭建chevereto图床</h5>
          </div>

<h3 id="首先在服务器安装docker和docker-compose，这里忽略，请自行查找教程"><a href="#首先在服务器安装docker和docker-compose，这里忽略，请自行查找教程" class="headerlink" title="首先在服务器安装docker和docker-compose，这里忽略，请自行查找教程"></a>首先在服务器安装docker和docker-compose，这里忽略，请自行查找教程</h3><ul>
<li><p>创建挂载目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir database chevereto_images</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 conf/php.ini 取消 2M 上传限制</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">PHP:</span><br><span class="line"><span class="attr">max_execution_time</span> = <span class="number">60</span><span class="comment">;</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">post_max_size</span> =  <span class="number">256</span>M<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
</li>
<li><p>调整权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R www-data:www-data database chevereto_images conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<strong>docker-compose.yml</strong>文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mariadb</span><br><span class="line">    volumes:</span><br><span class="line">      - ./database:/var/lib/mysql:rw</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - private</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: chevereto_root</span><br><span class="line">      MYSQL_DATABASE: chevereto</span><br><span class="line">      MYSQL_USER: chevereto</span><br><span class="line">      MYSQL_PASSWORD: chevereto</span><br><span class="line"></span><br><span class="line">  chevereto:</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    image: nmtan/chevereto</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - private</span><br><span class="line">    environment:</span><br><span class="line">      CHEVERETO_DB_HOST: db</span><br><span class="line">      CHEVERETO_DB_USERNAME: chevereto</span><br><span class="line">      CHEVERETO_DB_PASSWORD: chevereto</span><br><span class="line">      CHEVERETO_DB_NAME: chevereto</span><br><span class="line">      CHEVERETO_DB_PREFIX: chv_</span><br><span class="line">    volumes:</span><br><span class="line">      - ./chevereto_images:/var/www/html/images:rw</span><br><span class="line">      - ./conf/php.ini:/usr/local/etc/php/conf.d/php.ini</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8080</span>:<span class="number">80</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  private:</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
        <category>图床</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>N1 使用docker搭建emby</title>
    <url>/2021/05/18/N1-%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAemby/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="N1-使用docker搭建emby"><a href="#N1-使用docker搭建emby" class="headerlink" title="N1 使用docker搭建emby"></a>N1 使用docker搭建emby</h3>
          </div>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>这里推荐linuxserver的镜像，支持arm64架构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull linuxserver/emby:latest</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mkdir emby</span><br><span class="line">cd emby</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<h3 id="创建docker-compose-yml文件"><a href="#创建docker-compose-yml文件" class="headerlink" title="创建docker-compose.yml文件"></a>创建docker-compose.yml文件</h3><p>推荐使用docker-compose方式构建容器，方便下次重复使用</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;2.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  emby:</span><br><span class="line">    image: linuxserver/emby:latest</span><br><span class="line">    container_name: emby</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=<span class="number">1000</span></span><br><span class="line">      - PGID=<span class="number">1000</span></span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/config</span><br><span class="line">      - /mnt:/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8096</span>:<span class="number">8096</span></span><br><span class="line">      - <span class="number">8920</span>:<span class="number">8920</span> <span class="comment">#optional https</span></span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>emby</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>N1</tag>
        <tag>emby</tag>
      </tags>
  </entry>
  <entry>
    <title>emby使用手册</title>
    <url>/2023/03/01/emby%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d597101ffc9beb74dbc62c8c977a9a1fd3d9969edb23da2393812b84b264873f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>emby</category>
      </categories>
      <tags>
        <tag>emby</tag>
      </tags>
  </entry>
  <entry>
    <title>解决访问github过慢以及git clone过慢的方法</title>
    <url>/2021/03/04/github%E8%AE%BF%E9%97%AE%E6%85%A2/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="解决访问github过慢以及git-clone过慢的方法"><a href="#解决访问github过慢以及git-clone过慢的方法" class="headerlink" title="解决访问github过慢以及git clone过慢的方法"></a>解决访问github过慢以及git clone过慢的方法</h3><p>感谢🙏 <a href="https://ghproxy.com/">ghproxy</a></p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h4><p><strong>git clone</strong> <a href="https://ghproxy.com/https://github.com/stilleshan/ServerStatus">https://ghproxy.com/https://github.com/stilleshan/ServerStatus</a></p><span id="more"></span><h4 id="git-clone-私有仓库"><a href="#git-clone-私有仓库" class="headerlink" title="git clone 私有仓库"></a><strong>git clone 私有仓库</strong></h4><p>Clone 私有仓库需要用户在 <a href="https://github.com/settings/tokens">Personal access tokens</a> 申请 Token 配合使用.<br><strong>git clone</strong> https://<strong>user:your_token</strong>@ghproxy.com/<a href="https://github.com/your_name/your_private_repo">https://github.com/your_name/your_private_repo</a></p><h4 id="wget-amp-curl"><a href="#wget-amp-curl" class="headerlink" title="wget &amp; curl"></a><strong>wget &amp; curl</strong></h4><p><strong>wget</strong> <a href="https://ghproxy.com/https://github.com/stilleshan/ServerStatus/archive/master.zip">https://ghproxy.com/https://github.com/stilleshan/ServerStatus/archive/master.zip</a><br><strong>wget</strong> <a href="https://ghproxy.com/https://raw.githubusercontent.com/stilleshan/ServerStatus/master/Dockerfile">https://ghproxy.com/https://raw.githubusercontent.com/stilleshan/ServerStatus/master/Dockerfile</a><br><strong>curl -O</strong> <a href="https://ghproxy.com/https://github.com/stilleshan/ServerStatus/archive/master.zip">https://ghproxy.com/https://github.com/stilleshan/ServerStatus/archive/master.zip</a><br><strong>curl -O</strong> <a href="https://ghproxy.com/https://raw.githubusercontent.com/stilleshan/ServerStatus/master/Dockerfile">https://ghproxy.com/https://raw.githubusercontent.com/stilleshan/ServerStatus/master/Dockerfile</a></p>
          </div>]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>linux操作系统故障处理-ext4文件系统超级块“can&#39;t read superblock”损坏修复</title>
    <url>/2021/08/16/ext4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%96%AD%E7%94%B5%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="“can’t-read-superblock”损坏修复"><a href="#“can’t-read-superblock”损坏修复" class="headerlink" title="“can’t read superblock”损坏修复"></a>“can’t read superblock”损坏修复</h3>
          </div>


<h4 id="修复命令"><a href="#修复命令" class="headerlink" title="修复命令"></a>修复命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fsck -y /dev/sda1</span><br><span class="line">mount /dev/sda1 /mnt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下通过RPC远程关机windows</title>
    <url>/2023/03/01/linux%E4%B8%8B%E9%80%9A%E8%BF%87RPC%E8%BF%9C%E7%A8%8B%E5%85%B3%E6%9C%BAwindows/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="linux下通过RPC远程关机windows"><a href="#linux下通过RPC远程关机windows" class="headerlink" title="linux下通过RPC远程关机windows"></a>linux下通过RPC远程关机windows</h3>
          </div>


<ul>
<li><h4 id="windows防火墙配置"><a href="#windows防火墙配置" class="headerlink" title="windows防火墙配置"></a>windows防火墙配置</h4><p>打开Windows Defender设置允许应用通过防火墙<br>勾选Windows Management Instrumentation (WMI)</p>
</li>
<li><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>打开windows 终端执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sc start RemoteRegistry</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="编辑注册表"><a href="#编辑注册表" class="headerlink" title="编辑注册表"></a>编辑注册表</h4><p>win + R 打开注册表，一层层找到 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System 下，创建32位的DWORD，命名LocalAccountTokenFilterPolicy并将其值设置为1。</p>
</li>
<li><h4 id="安装smb服务"><a href="#安装smb服务" class="headerlink" title="安装smb服务"></a>安装smb服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install samba</span><br></pre></td></tr></table></figure></li>
<li><h4 id="执行关机命令"><a href="#执行关机命令" class="headerlink" title="执行关机命令"></a>执行关机命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net rpc shutdown --ipaddress 192.168.x.x --user user%password</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下使用ffmpeg调用摄像头推流</title>
    <url>/2021/10/15/mac%E4%B8%8B%E4%BD%BF%E7%94%A8ffmpeg%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8E%A8%E6%B5%81/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="mac下使用ffmpeg调用摄像头推流"><a href="#mac下使用ffmpeg调用摄像头推流" class="headerlink" title="mac下使用ffmpeg调用摄像头推流"></a>mac下使用ffmpeg调用摄像头推流</h3>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -f avfoundation -framerate 30 -i &quot;1:0&quot; \</span><br><span class="line">-f avfoundation -framerate 30 -video_size 640x480 -i &quot;0&quot; \</span><br><span class="line">-c:v libx264 -preset ultrafast \</span><br><span class="line">-filter_complex &#x27;overlay=main_w-overlay_w-10:main_h-overlay_h-10&#x27; \</span><br><span class="line">-acodec libmp3lame -ar 44100 -ac 1 \</span><br><span class="line">-f flv rtmp://localhost/live1/room1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>推流</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>maven 强制更新依赖命令</title>
    <url>/2021/03/08/maven-%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="maven-强制更新依赖命令"><a href="#maven-强制更新依赖命令" class="headerlink" title="maven 强制更新依赖命令"></a>maven 强制更新依赖命令</h3>
          </div>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn dependency:purge-local-repository</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>解决docker容器中的nginx代理其他容器的各种问题</title>
    <url>/2021/03/05/%E8%A7%A3%E5%86%B3docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84nginx%E4%BB%A3%E7%90%86%E5%85%B6%E4%BB%96%E5%AE%B9%E5%99%A8%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="解决docker容器中的nginx代理其他容器出现404或者不通"><a href="#解决docker容器中的nginx代理其他容器出现404或者不通" class="headerlink" title="解决docker容器中的nginx代理其他容器出现404或者不通"></a>解决docker容器中的nginx代理其他容器出现404或者不通</h3>
          </div>


<h4 id="例如下面这段dockerfile，需要指定容器在同一下，才可以通过nginx中的proxy-pass代理成功，当然最后需要在services同级声明外部网络"><a href="#例如下面这段dockerfile，需要指定容器在同一下，才可以通过nginx中的proxy-pass代理成功，当然最后需要在services同级声明外部网络" class="headerlink" title="例如下面这段dockerfile，需要指定容器在同一下，才可以通过nginx中的proxy_pass代理成功，当然最后需要在services同级声明外部网络"></a>例如下面这段dockerfile，需要指定容器在同一<font color="ff0000"><span class="label success">networks</span></font>下，才可以通过nginx中的proxy_pass代理成功，当然最后需要在services同级声明外部网络</h4><span id="more"></span>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    container_name: <span class="string">&#x27;nginx&#x27;</span></span><br><span class="line">    restart: <span class="string">&#x27;always&#x27;</span></span><br><span class="line">    image: <span class="string">&#x27;nginx&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&#x27;/home/nginx/www:/usr/share/nginx/html&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;/home/nginx/log:/var/log/nginx/&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;/home/nginx/conf:/etc/nginx/conf.d&#x27;</span></span><br><span class="line"></span><br><span class="line">  music:</span><br><span class="line">    container_name: <span class="string">&#x27;music&#x27;</span></span><br><span class="line">    restart: <span class="string">&#x27;always&#x27;</span></span><br><span class="line">    image: <span class="string">&#x27;binaryify/netease_cloud_music_api&#x27;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;3000:3000&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">networks:</span><br><span class="line">  frontend:</span><br></pre></td></tr></table></figure>



<h4 id="查看容器信息命令，可以获取容器ip等信息"><a href="#查看容器信息命令，可以获取容器ip等信息" class="headerlink" title="查看容器信息命令，可以获取容器ip等信息"></a>查看容器信息命令，可以获取容器ip等信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect container</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>vercel免费部署hexo</title>
    <url>/2021/01/02/%E4%BD%BF%E7%94%A8vercel%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2github%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="注册-vercel"><a href="#注册-vercel" class="headerlink" title="注册 vercel"></a>注册 vercel</h3><p> 打开<a href="https://vercel.com/">vercel.com</a>注册一个新账户，注册新用户必须使用 <a href="https://github.com/">github</a> 账户进行授权，后续可以选择 <a href="https://github.com/">github</a> 上的项目直接部署。</p><span id="more"></span><h3 id="安装-hexo-cli"><a href="#安装-hexo-cli" class="headerlink" title="安装 hexo-cli"></a>安装 hexo-cli</h3><p>在安装 hexo-cli 前，需要保证电脑安装了 nodejs。<br>nodejs 需要在<a href="https://nodejs.org/zh-cn/">node 官网</a>下载，安装好 nodejs 后，也会相应的安装上 npm，接下来就可以安装 hexo-cli 了。</p><p>安装命令：<code>npm install hexo-cli -g</code></p><p>检测是否安装成功，在终端执行：<code>hexo -v</code>命令，如果出现以下内容则表示安装成功。</p><img src="https://pic.rmb.bdstatic.com/bjh/053d1856c504cab7166088ba1e46296a.png" height="250" width="250"><h3 id="vercel-hexo-创建项目"><a href="#vercel-hexo-创建项目" class="headerlink" title="vercel+hexo 创建项目"></a>vercel+hexo 创建项目</h3><ul><li>登陆系统后点击<code>new project</code>，创建新项目</li><li>Import Git Repository，选择从github绑定的账号下面的hexo项目，点击 <a class="btn" href="https://vercel.com/new" title="title"><i class="fa fa-hand-o-right fa-fw"></i>Import</a></li><li>PROJECT NAME 自己取名</li><li>FRAMEWORK PRESET 选择HEXO</li><li>点击deploy</li></ul><br><h3 id="附hexo基本命令"><a href="#附hexo基本命令" class="headerlink" title="附hexo基本命令"></a>附hexo基本命令</h3><ul><li>新建文章：<code>hexo new 名称</code>或<code>hexo n 名称</code></li><li>运行本地服务器（预览）：<code>hexo s</code></li><li>生成静态文件：<code>hexo g</code></li><li>清除已生成文件：<code>hexo clean</code></li><li>部署到服务器：<code>hexo d</code></li><li>生成并部署文件：<code>hexo g -d</code>或<code>hexo d -g</code></li></ul><br><h5 id="本博客部署在vercel上"><a href="#本博客部署在vercel上" class="headerlink" title="本博客部署在vercel上"></a>本博客部署在vercel上</h5>
          </div>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>blog</tag>
        <tag>vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme申请泛域名SSL证书</title>
    <url>/2022/06/25/%E4%BD%BF%E7%94%A8acme%E7%94%B3%E8%AF%B7%E6%B3%9B%E5%9F%9F%E5%90%8DSSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="使用acme申请泛域名SSL证书"><a href="#使用acme申请泛域名SSL证书" class="headerlink" title="使用acme申请泛域名SSL证书"></a>使用acme申请泛域名SSL证书</h3>
          </div>

<h4 id="获取acme脚本"><a href="#获取acme脚本" class="headerlink" title="获取acme脚本"></a>获取acme脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h4 id="修改默认CA"><a href="#修改默认CA" class="headerlink" title="修改默认CA"></a>修改默认CA</h4><p>由于当前最新的acme是以ZerroSSL作为默认CA方的，而他家的证书存在数量限制，如果我们需要申请多个证书时会有些不方便，所以一般我会将默认CA方变更为Let‘sEncrypt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server  letsencrypt</span><br></pre></td></tr></table></figure>

<h4 id="这里使用DNS-API模式进行申请证书"><a href="#这里使用DNS-API模式进行申请证书" class="headerlink" title="这里使用DNS API模式进行申请证书"></a>这里使用DNS API模式进行申请证书</h4><p>使用Cloudflare DNS API进行证书申请，需要获取API Key以及对应的账户邮箱。Cloudflare的API key可在“我的个人资料”-&gt;”API 密钥“中进行查看。</p>
<ul>
<li>导入相关环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CF_Key=&quot;***********************&quot;</span><br><span class="line">export CF_Email=**********@****.com</span><br></pre></td></tr></table></figure>
<ul>
<li>申请命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  -d example.com  --dns dns_cf</span><br></pre></td></tr></table></figure>

<ul>
<li>证书安装</li>
</ul>
<span class="label default">nginx</span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert \</span><br><span class="line">--domain example.com \ </span><br><span class="line">--cert-file /path/to/cert/cert.pem \</span><br><span class="line">--key-file /path/to/keyfile/key.pem \</span><br><span class="line">--fullchain-file /path/to/fullchain/fullchain.pem \</span><br><span class="line">--reloadcmd &quot;sudo systemctl reload nginx.service&quot;</span><br></pre></td></tr></table></figure>

<br>
<span class="label default">apache</span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert \</span><br><span class="line">--domain example.com \ </span><br><span class="line">--cert-file /path/to/cert/cert.pem \</span><br><span class="line">--key-file /path/to/keyfile/key.pem \</span><br><span class="line">--fullchain-file /path/to/fullchain/fullchain.pem \</span><br><span class="line">--reloadcmd &quot;sudo systemctl reload apache2.service&quot;</span><br></pre></td></tr></table></figure>

<br>
#### 查看当前系统环境下的所申请的证书信息
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --list</span><br></pre></td></tr></table></figure>

<h4 id="导出证书为pfx等格式，为emby或jellyfin使用"><a href="#导出证书为pfx等格式，为emby或jellyfin使用" class="headerlink" title="导出证书为pfx等格式，为emby或jellyfin使用"></a>导出证书为pfx等格式，为emby或jellyfin使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d example.com --key-file key.pem --cert-file cert.pem</span><br><span class="line">openssl pkcs12 -export -out emby.pfx -inkey key.pem -in cert.pem</span><br></pre></td></tr></table></figure>

<p>注：<br>申请泛域名证书时-d参数为*.example.com<br><br><br><br></p>
<p>更多的证书申请方式可以参考官方<a href="https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert">Wiki</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>解决mac上运行app损坏问题</title>
    <url>/2022/07/01/%E8%A7%A3%E5%86%B3mac%E4%B8%8A%E8%BF%90%E8%A1%8Capp%E6%8D%9F%E5%9D%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<div class="note success">
            <h3 id="解决mac上运行app损坏问题"><a href="#解决mac上运行app损坏问题" class="headerlink" title="解决mac上运行app损坏问题"></a>解决mac上运行app损坏问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo xattr -r -d com.apple.quarantine /Applications/xxxx.app</span><br></pre></td></tr></table></figure>
          </div>]]></content>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
</search>
